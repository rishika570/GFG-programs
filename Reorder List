//{ Driver Code Starts
import java.util.*;

class Node {
    int data;
    Node next;
    Node(int d) {
        data = d;
        next = null;
    }
}

  public class ReorderList {
    Node head; // head of lisl
    Node last; // last of linked list

    /* Linked list Node*/

    /* Utility functions */

    /* Inserts a new Node at front of the list. */
    public void addToTheLast(Node node) {

        if (head == null) {
            head = node;
            last = head;
        } else {
            // Node temp = head;
            // while (temp.next != null) temp = temp.next;

            last.next = node;
            last = last.next;
        }
    }
    /* Function to print linked list */
    void printList() {
        Node temp = head;
        while (temp != null) {
            System.out.print(temp.data + " ");
            temp = temp.next;
        }
        System.out.println();
    }

    /* Drier program to test above functions */
    public static void main(String args[]) {

        /* Constructed Linked List is 1->2->3->4->5->6->
           7->8->8->9->null */
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        while (t > 0) {
            int n = sc.nextInt();
            ReorderList llist = new ReorderList();

            int a1 = sc.nextInt();
            Node head = new Node(a1);
            llist.addToTheLast(head);
            for (int i = 1; i < n; i++) {
                int a = sc.nextInt();
                llist.addToTheLast(new Node(a));
            }

            llist.head = new Solution().reorderlist(llist.head);

            llist.printList();

            t--;
        }
    }
}
// } Driver Code Ends


/* Following is the Linked list node structure */

/*class Node
{
    int data;
    Node next;
    Node(int d) {
        data = d;
        next = null;
    }
}*/

class Solution {
    Node reorderlist(Node head) {
        ArrayList<Integer> list=new ArrayList<>();
        Node temp=head;
        while(temp!=null){
            list.add(temp.data);
            temp=temp.next;
        }
        int i=0;
        int j=list.size()-1;
        ArrayList<Integer> list1=new ArrayList<>();
        if(list.size()%2==0){
        while(i<j){
            list1.add(list.get(i));
            list1.add(list.get(j));
            i++;
            j--;
        }
        }
        else{
           while(i<j){
            list1.add(list.get(i));
            list1.add(list.get(j));
            i++;
            j--;
        }
        list1.add(list.get(i));
        }
        Collections.reverse(list1);
        Node curr=new Node(list1.get(0));
        for(int k=1;k<list1.size();k++){
            Node newnode=new Node(list1.get(k));
            newnode.next=curr;
            curr=newnode;
        }
       // System.out.println(list1);
    //   Node head1=new Node(list1.get(0));
    //   Node curr=new Node(list1.get(0));
    //   for(int k=1;k<list1.size();k++){
    //       Node newnode=new Node(list1.get(k));
    //       curr.next=newnode;
    //       curr=newnode;
    //   }
        return curr;
    }
}
