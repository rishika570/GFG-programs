//{ Driver Code Starts
import java.util.*;
import java.lang.*;
import java.io.*;
class GFG
{
    public static void main(String[] args) throws IOException
    {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(br.readLine().trim());
        while(T-->0)
        {
            String[] s = br.readLine().trim().split(" ");
            int n = Integer.parseInt(s[0]);
            int m = Integer.parseInt(s[1]);
            int[][] grid = new int[n][m];
            for(int i = 0; i < n; i++){
                String[] S = br.readLine().trim().split(" ");
                for(int j = 0; j < m; j++){
                    grid[i][j] = Integer.parseInt(S[j]);
                }
            }
            Solution obj = new Solution();
            int[][] ans = obj.nearest(grid);
            for(int i = 0; i < ans.length; i++){
                for(int j = 0; j < ans[i].length; j++){
                    System.out.print(ans[i][j] + " ");
                }
                System.out.println();
            }
        }
    }
}
// } Driver Code Ends


class Solution
{
    //Function to find distance of nearest 1 in the grid for each cell.
    public int[][] nearest(int[][] grid)
    {   int m=grid.length;
        int n=grid[0].length;
        int dir[][]={{0,1},{1,0},{0,-1},{-1,0}};
        int[][] res=new int[m][n];
        Queue<int[]> q=new LinkedList<>();
        int i,j,d1;
        for(i=0;i<m;i++){
            for(j=0;j<n;j++){
                if(grid[i][j]==1){
                    res[i][j]=0;
                    q.add(new int[]{i,j,0});
                }
                else{
                    res[i][j]=Integer.MAX_VALUE;
                }
            }
        }
        while(!q.isEmpty()){
            int size=q.size();
            while(size-->0){
                int[] curr=q.poll();
                for(int[] d:dir){
                    i=curr[0]+d[0];
                    j=curr[1]+d[1];
                    d1=curr[2];
                    if(i>=0 && i<m && j>=0 && j<n && res[i][j]>d1+1){
                        res[i][j]=d1+1;
                        q.add(new int[]{i,j,d1+1});
                    }
                }
            }
        }
        return res;
        
    }
    
}
