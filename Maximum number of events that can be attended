//{ Driver Code Starts
import java.io.*;
import java.util.*;

class GFG {
    public static void main(String args[]) throws IOException {
        BufferedReader read =
            new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(read.readLine());
        while (t-- > 0) {
            int N = Integer.parseInt(read.readLine());
            
            String S1[] = read.readLine().split(" ");
            String S2[] = read.readLine().split(" ");
            int[] start = new int[N];
            int[] end = new int[N];
            
            for(int i=0; i<N; i++)
            {
                start[i] = Integer.parseInt(S1[i]);
                end[i] = Integer.parseInt(S2[i]);
            }

            Solution ob = new Solution();
            System.out.println(ob.maxEvents(start,end,N));
        }
    }
}
// } Driver Code Ends


//User function Template for Java

class Solution {
    static int maxEvents(int[] start, int[] end, int N) {
        int events[][]=new int[N][2];
        for(int i=0;i<N;i++){
            events[i][0]=start[i];
            events[i][1]=end[i];
        }
        Arrays.sort(events,(a,b)->a[0]-b[0]);
        PriorityQueue<int[]> pq=new PriorityQueue<int[]>((a,b)->a[1]-b[1]);
        int idx=0;
        int res=0;
        for(int i=1;i<=100000;i++){
            while(idx<events.length && events[idx][0]==i){
                pq.add(events[idx]);
                idx++;
            }
            if(pq.size()>0){
                pq.poll();
                res++;
            }
            while(pq.size()>0 && pq.peek()[1]==i){
                pq.poll();
            }
        }
        return res;
    }
};
