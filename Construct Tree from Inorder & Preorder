//{ Driver Code Starts
import java.util.*;
import java.io.*;
class Node
{
    int data; 
    Node left, right;
    Node(int key)
    {
        data = key;
        left = right = null;
    }
}

class GFG
{
    public static void main (String[] args)
    {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        
        while(t-- > 0)
        {
            int n = sc.nextInt();
            Node root = null;
            int inorder[] = new int[n];
            int preorder[] = new int[n];
            for(int i = 0; i < n; i++)
              inorder[i] = sc.nextInt();
              
            for(int i = 0; i < n; i++)
              preorder[i] = sc.nextInt();
              
            Solution ob = new Solution();
            root = ob.buildTree(inorder, preorder, n);
            postOrdrer(root);
            System.out.println();
        }
    }
    
    public static void postOrdrer(Node root)
    {
        if(root == null)
          return;
          
        postOrdrer(root.left);
        postOrdrer(root.right);
        System.out.print(root.data + " ");
    }
}
// } Driver Code Ends


class Solution
{
    public static Node buildTree(int inorder[], int preorder[], int n)
    {
         return CreateTree(inorder,0,inorder.length-1,preorder,0,preorder.length-1);
    }
    public static Node CreateTree(int[] inorder,int ilo,int ihi,int[] preorder,int plo,int phi){     
        if(ilo>ihi || plo>phi){
        return null;
    }
        Node nn=new Node(preorder[plo]);
        int idx=search(inorder,ilo,ihi,preorder[plo]);
        int net=idx-ilo;
        nn.left=CreateTree(inorder,ilo,idx-1,preorder,plo+1,plo+net);
        nn.right=CreateTree(inorder,idx+1,ihi,preorder,plo+net+1,phi);
        return nn;
    }
    public static int search(int[] in,int si,int ei,int item){
        for(int i=si;i<=ei;i++){
            if(in[i]==item){
                return i;
            }
        }
        return -1;
    }
    }
