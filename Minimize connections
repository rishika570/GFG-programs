//{ Driver Code Starts
import java.io.*;
import java.util.*;


class IntMatrix
{
    public static int[][] input(BufferedReader br, int n, int m) throws IOException
    {
        int[][] mat = new int[n][];
        
        for(int i = 0; i < n; i++)
        {
            String[] s = br.readLine().trim().split(" ");
            mat[i] = new int[s.length];
            for(int j = 0; j < s.length; j++)
                mat[i][j] = Integer.parseInt(s[j]);
        }
        
        return mat;
    }
    
    public static void print(int[][] m)
    {
        for(var a : m)
        {
            for(int e : a)
                System.out.print(e + " ");
            System.out.println();
        }
    }
    
    public static void print(ArrayList<ArrayList<Integer>> m)
    {
        for(var a : m)
        {
            for(int e : a)
                System.out.print(e + " ");
            System.out.println();
        }
    }
}

class GFG {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int t;
        t = Integer.parseInt(br.readLine());
        while(t-- > 0){
            
            int n; 
            n = Integer.parseInt(br.readLine());
            
            
            int m; 
            m = Integer.parseInt(br.readLine());
            
            
            int[][] c = IntMatrix.input(br, m, 2);
            
            Solution obj = new Solution();
            int res = obj.minimumConnections(n, m, c);
            
            System.out.println(res);
            
        }
    }
}

// } Driver Code Ends


class Solution {
    public static int minimumConnections(int n, int m, int[][] c) {
        if(c.length<n-1){
            return -1;
        }
        List<List<Integer>> list=new ArrayList<>();
        for(int i=0;i<n;i++){
            list.add(new ArrayList<>());
        }
        for(int i=0;i<c.length;i++){
            list.get(c[i][0]).add(c[i][1]);
            list.get(c[i][1]).add(c[i][0]);
        }
        boolean[] vis=new boolean[n];
       

        int c1=0;
        for(int i=0;i<n;i++){
            if(!vis[i]){
                bfs(i,vis,list);
                c1++;
            }
        }
        return c1-1;
    }
    public static void bfs(int node,boolean[] vis,List<List<Integer>> list){
         Queue<Integer> q=new LinkedList<>();
         q.add(node);
        while(!q.isEmpty()){
         int curr=q.poll();
            for(int adj:list.get(curr)){
                if(!vis[adj]){
                    q.add(adj);
                    vis[adj]=true;
                }
            }
        }
    }
    
}
        
