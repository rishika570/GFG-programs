//{ Driver Code Starts
// Initial Template for Java

import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
    public static void main(String args[]) throws IOException {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        while (t-- > 0) {
            int N = sc.nextInt();
            int[] arr = new int[N];
            for (int i = 0; i < N; i++) {
                arr[i] = sc.nextInt();
            }
            Solution obj = new Solution();
            List<Integer> res = obj.LargestSubset(N, arr);
            int isValidSeq = 1, sz = res.size();
            for (int i = 0; i < sz; i++) {
                for (int j = i + 1; j < sz; j++) {
                    if ((res.get(i) % res.get(j) == 0) ||
                        (res.get(j) % res.get(i) == 0))
                        continue;
                    else {
                        isValidSeq = 0;
                        break;
                    }
                }
            }
            System.out.println(isValidSeq + " " + sz);
        }
    }
}
// } Driver Code Ends


// User function Template for Java

class Solution {
    public List<Integer> LargestSubset(int n, int[] nums) {
        List<Integer> list=new ArrayList<>();
        int[] count=new int[n];
        int[] pre=new int[n];
        Arrays.sort(nums);
        int max=0,index=-1;
        for(int i=0;i<n;i++){
            count[i]=1;
            pre[i]=-1;
            for(int j=i-1;j>=0;j--){
                if(nums[i]%nums[j]==0){
                    if(1+count[j]>count[i]){
                        count[i]=count[j]+1;
                        pre[i]=j;
                    }
                }
            }
            if(count[i]>max){
                max=count[i];
                index=i;
            }
        }
        while(index!=-1){
            list.add(nums[index]);
            index=pre[index];
        }
        return list;
    }
}
