// { Driver Code Starts
import java.util.*;

class FindMinCost
{
	public static void main(String args[])
	{
		Scanner sc = new Scanner(System.in);
		int t = sc.nextInt();
		while(t > 0)
		{
			int n = sc.nextInt();
			int m = sc.nextInt();
			int arr[][] = new int[n][m];
			for(int i=0; i<n; i++)
			{
				for(int j=0; j<m; j++ )
				{
					arr[i][j] = sc.nextInt();
				}
			}
			System.out.println(new Solution().maxArea(arr, n, m));
		t--;
		}
	}
}// } Driver Code Ends


/*Complete the function given below*/
class Solution {
    public int maxArea(int matrix[][], int n, int m) {
        int[] ans=new int[matrix[0].length];
        int area=0;
        for(int i=0;i<matrix.length;i++){
            for(int j=0;j<matrix[0].length;j++){
                if(matrix[i][j]==1){
                    ans[j]++;
                }
                else{
                    ans[j]=0;
                }
            }
            area=Math.max(area,Area(ans));
        }
        return area;
    }
    public static int Area(int []arr){
        Stack<Integer> st=new Stack<>();
        int maxarea=0;
        for(int i=0;i<arr.length;i++){
            while(!st.isEmpty() && arr[i]<arr[st.peek()]){
                int h=arr[st.pop()];
                int r=i;
                if(st.isEmpty()){
                    maxarea=Math.max(maxarea,h*r);
                }
                else{
                    int l=st.peek();
                    maxarea=Math.max(maxarea,h*(r-l-1));
                }
            }
            st.push(i);
        }
        int r=arr.length;
        while(!st.isEmpty()){
            int h=arr[st.pop()];
            if(st.isEmpty()){
                    maxarea=Math.max(maxarea,h*r);
                }
                else{
                    int l=st.peek();
                    maxarea=Math.max(maxarea,h*(r-l-1));
                }
        }
        return maxarea;
        // add code here.
    }
}
