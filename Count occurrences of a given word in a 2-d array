//{ Driver Code Starts
//Initial Template for Java

import java.io.*;
import java.util.*;

class GFG
{
    static class FastReader{ 
        BufferedReader br; 
        StringTokenizer st; 
  
        public FastReader(){ 
            br = new BufferedReader(new InputStreamReader(System.in)); 
        } 
  
        String next(){ 
            while (st == null || !st.hasMoreElements()){ 
                try{ st = new StringTokenizer(br.readLine()); } catch (IOException  e){ e.printStackTrace(); } 
            } 
            return st.nextToken(); 
        } 
  
        String nextLine(){ 
            String str = ""; 
            try{ str = br.readLine(); } catch (IOException e) { e.printStackTrace(); } 
            return str; 
        } 
        
        Integer nextInt(){
            return Integer.parseInt(next());
        }
    } 
    
    public static void main(String args[])
    {
        FastReader sc = new FastReader();
        int t = sc.nextInt();
        while(t>0)
        {
            int R = sc.nextInt();
            int C = sc.nextInt();
            
            char mat[][] = new char[R][C];
            for(int i=0;i<R;i++)
            {
                for(int j=0;j<C;j++)
                {
                    mat[i][j] = sc.next().charAt(0);
                }
            }
            String target  = sc.next();
            Solution obj = new Solution();
            System.out.println(obj.findOccurrence(mat,target));
            
            t--;
        }
    }
}

// } Driver Code Ends


//User function Template for Java

class Solution
{  int c=0;
    public int findOccurrence(char mat[][], String target)
    {
        int n=mat.length;
        int m=mat[0].length;
        char x=target.charAt(0);
        boolean visited[][]=new boolean[n][m];
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(mat[i][j]==x){
                    solve(mat,n,m,visited,i,j,0,target);
                }
            }
        }
        return c;
    }
    public void solve(char mat[][],int n,int m,boolean visited[][],int i,int j,int idx,String target){
        if(i<0 || j<0 || i>n-1 || j>m-1 || visited[i][j] || mat[i][j]!=target.charAt(idx)){
           return; 
        }
        if(idx+1>=target.length()){
            c++;
            return;
        }
        visited[i][j]=true;
        solve(mat,n,m,visited,i,j+1,idx+1,target);
        solve(mat,n,m,visited,i,j-1,idx+1,target);
        solve(mat,n,m,visited,i+1,j,idx+1,target);
        solve(mat,n,m,visited,i-1,j,idx+1,target);
        visited[i][j]=false;
        
    }
}
