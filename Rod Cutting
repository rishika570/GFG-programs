//{ Driver Code Starts
import java.io.*;
import java.util.*;

class RodCutting {

    public static void main(String args[])throws IOException {
        BufferedReader in=new BufferedReader(new InputStreamReader(System.in));
        PrintWriter out=new PrintWriter(System.out);
        
        int t = Integer.parseInt(in.readLine().trim());
        while (t-- > 0) {
            int n = Integer.parseInt(in.readLine().trim());
            String s[]=in.readLine().trim().split(" ");
            int[] arr = new int[n];
            for (int i = 0; i < n; i++) arr[i] = Integer.parseInt(s[i]);

            Solution ob = new Solution();
            out.println(ob.cutRod(arr, n));
        }
        out.close();
    }
}

// } Driver Code Ends


class Solution{
    public int cutRod(int price[], int n) {
        int dp[][]=new int[n+1][n+1];
        for(int[]r:dp){
            Arrays.fill(r,-1);
        }
        return solve(price,0,n,dp);
    }
    public int solve(int[] price,int i,int n,int[][] dp){
        if(i>=price.length){
            return 0;
        }
        if(n==0){
            return 0;
        }
        if(dp[i][n]!=-1){
            return dp[i][n];
        }
        if(n>=i+1){
        int cut=price[i]+solve(price,i,n-(i+1),dp);
        int dcut=solve(price,i+1,n,dp);
        return  dp[i][n]=Math.max(cut,dcut);
        }
        else{
            return dp[i][n]=solve(price,i+1,n,dp);
        }
    }
}
