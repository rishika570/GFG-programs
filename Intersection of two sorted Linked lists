//{ Driver Code Starts
import java.io.*;
import java.util.*;
class Node 
{
    int data;
    Node next;
    
    Node(int a)
        {
            data = a;
            next = null;
        }
}
class GfG
{
    static Scanner sc = new Scanner(System.in);
    public static Node inputList(int size)
    {
        Node head, tail;
        int val;
        
        val = sc.nextInt();
        
        head = tail = new Node(val);
        
        size--;
        
        while(size-->0)
        {
            val = sc.nextInt();
            tail.next = new Node(val);
            tail = tail.next;
        }
        
        return head;
    }
    
    public static void printList(Node n)
    {
        while(n!=null)
        {
            System.out.print(n.data + " ");
            n = n.next;
        }
    }
    
    public static void main(String args[])
        {
            
            int t = sc.nextInt();
            while(t-->0)
                {
                    int n , m;
                    
                    n = sc.nextInt();
                    m = sc.nextInt();
                    
                    Node head1 = inputList(n);
                    Node head2 = inputList(m);
                    
                    Sol obj = new Sol();
                    
                    Node result = obj.findIntersection(head1, head2);
	    
	                printList(result);
	                System.out.println();
                }
        }
}
// } Driver Code Ends


/* Node of a linked list
 class Node {
   int data;
    Node next;
    Node(int d)  { data = d;  next = null; }
}
*/

class Sol
{
   public static Node findIntersection(Node head1, Node head2)
    { HashMap<Integer,Boolean> map=new HashMap<>();
    Node temp1=head1;
    Node temp2=head2;
    while(temp1!=null){
        map.put(temp1.data,false);
        temp1=temp1.next;
    }
    while(temp2!=null){
        if(map.containsKey(temp2.data)){
            map.put(temp2.data,true);
        }
        temp2=temp2.next;
    }
    Node newnode=new Node(0);
    Node curr=newnode;
    ArrayList<Integer> list=new ArrayList<>();
    for(int num:map.keySet()){
        if(map.get(num)==true){
            list.add(num);
        }
    }
    Collections.sort(list);
    for(int i=0;i<list.size();i++){
        curr.data=list.get(i);
        if(i+1>list.size()-1){
            break;
        }
        curr.next=new Node(0);
        curr=curr.next;
    }
    return newnode;
    }
}
