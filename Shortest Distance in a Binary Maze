//{ Driver Code Starts
// Initial Template for Java

import java.util.*;
import java.lang.*;
import java.io.*;

// Position this line where user code will be pasted.

class GFG {
    public static void main(String[] args) throws IOException {
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        while (T-- > 0) {
            int n = sc.nextInt();
            int m = sc.nextInt();
            int[][] grid = new int[n][m];

            for (int i = 0; i < n; i++) {

                for (int j = 0; j < m; j++) {
                    grid[i][j] = sc.nextInt();
                }
            }
            int[] source = new int[2];
            for (int i = 0; i < 2; i++) {
                int x = sc.nextInt();
                source[i] = x;
            }
            int[] dest = new int[2];
            for (int i = 0; i < 2; i++) {
                int x = sc.nextInt();
                dest[i] = x;
            }
            Solution ob = new Solution();
            int ans = ob.shortestPath(grid, source, dest);
            System.out.println(ans);
        }
    }
}
// } Driver Code Ends


// User function Template for Java

class Solution {

    int shortestPath(int[][] grid, int[] source, int[] destination) {
      if(grid[source[0]][source[1]]==0){
            return -1;
        }
        Queue<Pair> q=new LinkedList<>();
        boolean[][] vis=new boolean[grid.length][grid[0].length];
        q.add(new Pair(source[0],source[1],0));
        vis[source[0]][source[1]]=true;
        int drow[]={-1,0,1,0};
        int dcol[]={0,1,0,-1};
        while(!q.isEmpty()){
            Pair curr=q.poll();
            int ans=curr.res;
            if(curr.row==destination[0] && curr.col==destination[1]){
                return ans;
            }
            for(int i=0;i<4;i++){
                int nrow=curr.row+drow[i];
                int ncol=curr.col+dcol[i];
                if(nrow>=0 && nrow<grid.length && ncol>=0 && ncol<grid[0].length && grid[nrow][ncol]==1 && !vis[nrow][ncol]){
                    vis[nrow][ncol]=true;
                    q.add(new Pair(nrow,ncol,ans+1));
                }
            }
        }
        return -1;
    }
}
class Pair{
    int row;
    int col;
    int res;
    Pair(int row,int col,int res){
        this.row=row;
        this.col=col;
        this.res=res;
    }
}

