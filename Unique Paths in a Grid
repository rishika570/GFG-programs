//{ Driver Code Starts
import java.io.*;
import java.util.*;

class GFG {
    public static void main(String args[]) throws IOException {
        BufferedReader read =
            new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(read.readLine());
        while (t-- > 0) {
            String S[] = read.readLine().split(" ");
            
            int n = Integer.parseInt(S[0]);
            int m = Integer.parseInt(S[1]);
            
            int [][] grid = new int[n][m];
            for(int i=0; i<n; i++)
            {
                String S1[] = read.readLine().split(" ");
                for(int j=0; j<m; j++)
                {
                    grid[i][j] = Integer.parseInt(S1[j]);
                }
            }

            Solution ob = new Solution();
            System.out.println(ob.uniquePaths(n,m,grid));
        }
    }
}
// } Driver Code Ends


//User function Template for Java

class Solution {
    static int uniquePaths(int n, int m, int[][] grid) {
        if(grid[n-1][m-1]==0){
            return 0;
        }
        int dp[][]=new int[n][m];
        for(int i=0; i< dp.length; i++){
         for(int j =0; j<m; j++) dp[i][j] = -1;
         }
        return solve(0,0,dp,grid);
    }
    public static int solve(int r,int c,int[][] dp,int grid[][]){
        int n=grid.length;
        int m=grid[0].length;
        int mod=1000000007;
        if(r==n-1 && c==m-1){
            return 1;
        }
        if(r<0 || r==n || c<0 || c==m || grid[r][c]==0){
            return 0;
        }
        if(dp[r][c]!=-1){
            return dp[r][c];}
            grid[r][c]=0;
            int right=solve(r,c+1,dp,grid);
            int down=solve(r+1,c,dp,grid);
            grid[r][c]=1;
            return dp[r][c]=(right+down)%mod;
    }
};
